var WorkerListener = require('./worker-listener');

/**
 * @class JobReporter
 *
 * Sniffs communication between a worker-pool and its children 
 * workers to generate a result report
 *
 * @author Ricardo Massa
 */
function JobReporter () {
	/**
	 * Stores the result of each job 
	 * @readOnly
	 * @type {Object}
	 */
	this.results = {};
	/**
	 * Stores the error returned on each job processing
	 * @readOnly
	 * @type {Object}
	 */
	this.errors = {};
	this._workerListener = new WorkerListener;
	this._listener = null;
}

/**
 * Starts listening for job results
 * @return {void} 
 */
JobReporter.prototype.startListening = function () {
	this._setupListener();	
	this._workerListener.startListening();
}

/**
 * Stops listening for job results
 * @return {void} 
 */
JobReporter.prototype.stopListening = function () {
	this._workerListener.stopListening();
	this._uninstallListener();
}

/**
 * Registers the job result message listener
 * @return {void} 
 */
JobReporter.prototype._setupListener = function () {
	var handler = JobReporter._listeners.message.bind(this);
	this._listener = function (event) {
		handler(event);
	}
	this._workerListener.on('message', this._listener);
}

/**
 * Uninstalls the job result message listener
 * @return {void} 
 */
JobReporter.prototype._uninstallListener = function () {
	this._workerListener.removeListener('message', this._listener);
}

JobReporter._listeners = {};

/**
 * Handles the arrival of a job result
 * @param  {object} event Event generated by WorkerListener
 *     @param {Worker} worker The worker which sent job result
 *     @param {object} forwardedMessage The result message the worker sent
 * @return {void}       
 */
JobReporter._listeners.message = function (event) {
	var worker = event.fromWorker;
	var message = event.forwardedMessage;

	switch (message.event) {
		case 'done':
			this.results[message.original.Body.id] = message.result;
			this.errors[message.original.Body.id] = message.error;
	}
}

module.exports = JobReporter;